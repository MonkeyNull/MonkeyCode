import java.util.ArrayDeque;
import java.util.Queue;

public class SaveXH {
    //解救小哈
    //存放地图的二维数组
    int[][] a = {{},{0,0,0,1,0},{0,0,0,0,0},{0,0,0,1,0},{0,0,1,0,0},{0,0,0,0,1}};
    //记录该点是否走过
    int[][] book = new int[6][5];
    //定义方向数组
    int[][] next = { {0,1}, {1,0}, {0,-1}, {-1,0}};
    int p,q,k,tx,ty,n,m;
    int min = 9999999;//记录最短路径

    //深度优先实现算法
    void dfs(int x, int y,int step){
        //判断是否到达小哈的位置
        if (x == p && y ==q){
            //更新最小值
            if (step < min)
                min = step;
            return;
        }
        //没有到小哈的位置
        //定义方向数组
        int[][] next = { {0,1}, {1,0}, {0,-1}, {-1,0}};
        for (k = 0; k <= 3; k++){
            //计算的下一个点的坐标
            tx = x + next[k][0];
            ty = y + next[k][1];

            //判断是否越界
            if (tx < 1 || tx > n || ty < 1 || ty > m)
                continue;
            //判断该点是否为障碍物或者已经在路径中
//            System.out.println(tx + " " + ty);
            if (a[tx][ty] == 0 && book[tx][ty] == 0){
                book[tx][ty] = 1;//标记这个点已经走过
                dfs(tx, ty, step + 1);//开始尝试下一个点
                book[tx][ty] = 0;//尝试结束，取消这个点的标记
            }
        }
        return;
    }

    //广度优先实现算法
    //定义一个节点记录x,y和步数
    class Node{
        int x;
        int y;
        int s;//步数
        public Node(int x, int y, int s) {
            this.x = x;
            this.y = y;
            this.s = s;
        }
    }

    //定义一个队列存放走过的坐标点
//    Queue<Node> queue = new ArrayDeque<>();
    ArrayDeque<Node> queue = new ArrayDeque();
    void wsf(){
        queue.addLast(new Node(1,1,0));
//        queue.add(new Node(1,1,0));
        boolean flag = false;
        while (!queue.isEmpty()){
            Node node = queue.peekFirst();
            //枚举四个方向
            for (k = 0; k <= 3; k++) {
                tx = node.x + next[k][0];
                ty = node.y + next[k][1];
            //判断是否越界
            if (tx < 1 || tx > n || ty < 1 || ty > m)
                continue;
            //判断是否是障碍物或者已经在路径中了
            if (a[tx][ty] == 0 && book[tx][ty] == 0){
                //把这个点标记为已经走过
                book[tx][ty] = 1;
                queue.addLast(new Node(tx,ty,node.s + 1));
            }
            if (tx == p && ty == q){
                flag = true;
                break;
            }
        }
            if (flag){
                System.out.println();
                break;
            }
            queue.pollFirst();
        }
    }


    public static void main(String[] args) {
        SaveXH saveXH = new SaveXH();
        saveXH.n = 5;
        saveXH.m = 4;
        saveXH.p = 4;
        saveXH.q = 3;
        int startx = 1;
        int starty = 1;
        saveXH.book[startx][starty] = 1;
//        saveXH.dfs(startx,starty,0);
        saveXH.wsf();
        System.out.println(saveXH.queue.peekLast().s);
    }


}

一、总结过去
我是7月份加入美团，过去半年整体的工作主要分为两个部分，第一个部分是深入学习美团文化，主要的工作内容包括新员工培训计划、社招训练营等一系列文化与基本功课程的学习，促使我在短时间内融入集体并且掌握了美团人必备的基本功给我这半年来的工作带来了极大的助力。第二个部分是负责砺剑基本功演练项目，主要的工作内容包括需求调研、需求分析、产品设计、后端开发、功能测试、以及客户支持等，负责的内容相比之前来说要更加的多元，在这个期间首先是自己对于完整的项目周期有了一个充分的认识，多重职责对应带来的就是多重挑战，如何做好需求调研和分析，如何进行产品设计等等是这半年来我经常思考的问题，多亏我的导师石栋的指导让我少走了很多弯路，促使我能够掌握这些技能，快速的投身到项目的建设中去。
1.目标与结果
1)回顾所在团队的阶段性目标。
业务目标（O）Objectives	关键结果（KR）Key Results
持续探索基本功演练场景，满足演练需求。	提供机房切换演练功能，实现机房演练流程化。

	提供服务禁用演练功能，支持5个业务组演练。
	提供雷达故障协同处理演练功能，支持5个业务组演练。
	完善VPN登录演练功能，支持5个业务组演练。
演练流程标准化、自动化，提高演练效率。	完善故障处理演练流程，实现演练流程真实化。
	支持新人演练。
	支持使用砺剑提供的公共appkey演练。
	提供自动化演练功能，完成3个业务试点。
强化运营手段，保障产品高效落地和推广。	提供演练运营大盘功能，实现演练效果可度量。
	应急处理场景在金服范围内全面使用。
	完成至少1场产品能力分享，覆盖金服10个以上业务组。


2)回顾个人阶段性目标以及达成情况。
个人目标	达成情况
完成团队阶段性目标	完成VPN演练场景的开发和上线，上一季度151位同学参与了该场景的演练，他们的VPN登录操作能力得到了有效的锻炼。
	完成演练运营图表大盘的开发和上线，大盘主要从下级组织、演练场景、人员等维度使用概览图、折线图一系列图表全方位展示各个组织或人员的演练成果，帮助管理者从不同的维度观测团队的演练情况。
	完成了使用公共appkey发起演练流程，由使用自己的appkey演练升级为砺剑提供公共的appkey进行演练，由于使用公共appkey是跟业务解耦的，不会影响到真实业务，在演练流程中就可以去掉某些审批的环节，既消除了风险又提高了演练效率，使得很多对风险比较敏感的团队消除顾虑，积极地投入到演练中来。
完成需求迭代管理工作。	完成需求23/41个，完成任务13/16个。
完成砺剑日常运维工作。	线上值班，发现并解决问题31/31个。
完成自主学习。	自学3篇（结构思考力、金字塔原理、重构）。

2.分析与总结
1)针对目标做了哪些重点工作或项目？关键推进过程、策略和结果是什么？
a.完成演练运营大盘需求。
背景：
演练运营大盘由SRE提出，主要目标弥补云图展示演练数据的不足，SRE一般在云图查看演练数据，但只有演练任务的执行数据，无法满足要求。像演练的达标率、响应时长、处理时长等，只能由砺剑自己提供。
过程：
这个需求是由石栋主导，在他完成前面的需求分析、产品设计后，将开发任务分成了两部分，他负责数据的收集，我负责数据的计算和展示，由于之前没有阅读需求设计和产品设计的经验，也没有开发图表功能的经验，所以遇到了两个问题，一是缺乏阅读需求设计和产品设计的方法，导致通过阅读起来特别吃力，二是在图表数据计算的时候会大量使用到lambda函数库，这个也是我之前很少接触到的。
策略：
针对于第一点，我多次请教石栋讲解需求和产品的文档，石栋也不厌其烦的一遍遍帮我梳理思路，最终我成功的了解了需求的全貌，也对如何阅读需求和产品文档有了一定的思路。针对于第二点lambda函数库不熟练的问题，我从下面三个方向进行了学习，第一从官方api中进行学习，第二从砺剑源码中学习该函数的使用，第三从技术网站上查看具体的使用案例，最终也掌握了该函数库的使用。
结果：
最终按交付时间上线了演练运营大盘。
b.完成人员演练记录需求。
背景：
运营大盘展示了各个组织的演练聚合数据，但是对于单个人的演练数据详情，例如当次演练是否达标，响应和处理的时长等指标是缺失的，提供人员演练数据方便SRE和项目管理者能够看到每个人的演练情况。
   		过程：
第一次独立负责一个需求，在拿到只是短短几句话的需求的时候，心里还是有很多疑问的，比如用户具体关注哪些数据，关注的程度等等，在进行需求开发之前，我觉得还是要澄清需求。
策略：
我采取了下列三点澄清了该需求，第一点确定需求的提出人，第二点提前准备好有疑问的点，第三点与需求的提出人进行会议沟通，经过沟通后澄清了需求，完成需求分析后面临的下一个问题是报表的呈现方式，根据用户对数据的关注程度，我画了多个版本的原型图进行组内讨论，组内定了方案后又找需求方去讨论，最终定版后开发上线。
结果：
后续该功能的相关接口也用到了新人演练的考试中，作为新人培训的一环，即提高了新人的实操能力也扩大了砺剑的影响力。
c.支持使用砺剑提供的公共appkey演练。
背景：
SRE准备大范围推广基本功，过程中使用砺剑公共服务进行演练，但演练前需要做很多准备工作，非工具方面，需要人工给演练人员附加各种权限，配置raptor告警组等，对组织演练的人员来讲，演练人员越多，工作量越大，效率低下。提供公共appkey旨在系统自动分配清除演练人员相关权限。极度简化用户在砺剑中的配置工作，用户只需关心演练中的人员操作即可。
过程：
我负责两部分，一是把公共appkey融入到现有的流程中，二是需要添加一批公共appkey资源，一个公共appkey资源需要经过Git、Xframe、Monkey、Plus、Raptor、Avatar多个平台的配置，几十个appkey的配置工作量是很大的。
策略：
对于添加资源这个苦力活，我在想能否减少在页面上的操作，将配置信息统一集中在一起，一次性填充好，降低填错的风险，于是采用了js脚本的方式，在各个平台上进行批量的配置。
结果：
采用js脚本方式添加公共资源，减少页面操作，降低了人工填写错误的风险，大大提升了添加公共资源的效率，最终加快了需求的交付时间。
2)结合你目前的工作，对标行业最佳实践进行分析。
//todo
3)分析总结哪些做对了、哪些做得不对、哪些该做的没有做、哪些可以减少投入，为什么？
哪些做对了？
a.支持使用砺剑提供的公共appkey演练。在公共appkey上线之前，面临着一下两点问题，一是对于演练组织者来讲，演练人员越多，工作量越大，效率低下；二是对于服务负责人来讲，对自己的服务进行演练是有风险。公共appkey提高了演练组织者组织演练的效率，消除了对真实服务的影响，9月初上线该功能后，9月的演练总次数相比于8月由497次增加到了2735次。
b.上线人员演练记录。人员演练记录的上线，帮助演练发起者快速的定位到演练中不达标的人员，便于不达标人员重新发起演练，加强团队基本功能力，同时该功能后来也应用在互联网+大学考试中，作为新人培训的一环，极大的扩展了砺剑的影响力。
哪些做得不对？
a.轻视用户建议。在解决用户的问题时总会遇到用户临时反馈的一些建议，对大多数建议一听觉的没用就忽略了，这是不对的，自己应该对用户的建议保持好奇，用户提供的每一条建议都是宝贵的，应该认真听取并且通过深挖这些建议来找到用户的核心诉求，解决用户的诉求就是在做好一个产品的路上不断前进。
b.偏向做容易的事。在写技术方案的时候，有一个问题涉及到两种方案，我选择了第一个方案，被石栋问到选择方案的理由，我的回复是这个方案看起来比较容易，另一个我没接触过，搞起来比较麻烦，石栋指出了不能完全用这种想法来选择方案，不熟悉的不会的可以学习，评定一个方案是要分析方案本身的优缺点，自己是否擅长只是其中的一个因素，如果只是因为容易的话，是不可取的，所以要谨记美团老话，坚持做正确的事，而不是容易的事。
4)影响个人取得更好表现的瓶颈或困难是什么？有什么思考和应对？
这半年来主要精力还是投入在业务上，自己的目光和格局也没有打开，没能从砺剑的整体发展方向上进行思考，同时自己的知识储备还是太少，支撑不起自己进行整体全面的思考，所以明年的主要目标是扩展自己的知识面，大量阅读专业相关的书籍和业务相关的书籍，让自己有足够的思考量，将产品建设的更好。
3.个人成长/炼心志
1)新收获了哪些知识、经验或技能？有哪些认知迭代？
a.讨论前，事先整理出要讨论的问题。通过周会或者私下找其他人沟通问题的时候，感觉说的时候并不能很好的表述出来，你以为问题描述完了，对方还会疑惑你说的究竟是什么，不能准确描述问题。这个跟自己的思考有关系，没有先对问题进行认真的思考，总结问题，而是着急去找人讨论，这个就导致了说不清楚问题，增加沟通成本，之后要耐的住性子，遇到问题先思考，整理，再进行讨论。
b.不要拒绝新的事物。接触了很多新的东西，写需求文档、产品文档，这是自己之前没有做过的东西。因为进度缓慢，产生很大的压力。心里难免生出排斥情绪，这种情绪极具内耗着自己。多亏石栋指导，让我度过了这个阶段，通过这个经历得出了三条经验，一是多跟前辈交流，讲出自己目前遇到的困难，寻求帮助。二是及时跟前辈反馈自己的思路，同步进展。三是心态调整，不要否定自己，新事物的学习总会有成本的，要放平心态，正如美团老话，我不会但我可以学。
2)心志有哪些提升（例如胸怀、使命感、同理心、好学、坚韧等）？
a.坚韧。在需求调研和需求分析阶段因为缺乏经验而走了不少弯路，也因为写的差被领导批评，走弯路和被批评是成长必经的一环，要经受住压力，找到核心的问题，然后去解决问题，功到自然成。
b.同理心。在服务用户或者产品设计时，要保持同理心，多站在用户的角度上去思考问题，以用户为中心，只有以用户为中心，屁股坐在用户的凳子上，才能真正的服务于用户，产品才是一个成功的产品。
3)有哪些待改进，将会怎么改进？
a)需求调研和分析不熟练。要刻意练习需求分析，主要从读写两个方面，多读优秀的需求分析案例，站在巨人的肩膀上看世界，抓住每一个需求分析的机会，多思考，多练习。
b)缺少结构化思考。在问题描述和写作上都抓不住主要脉络，多学习美团四大名著，并且学以致用。
4)谈谈对“以客户为中心”理念的思考，如何体现在自己的工作上？
a.需求分析的时候，要积极与用户讨论，挖掘出用户真正的痛点，客户有些时候并不是一次性就可以完整无误的说出他们的需求，作为需求的处理方，我们要学会提问，用问题引导用户将需求澄清清楚。
b.产品设计的时候，要站在用户的角度，数据是否是用户关注的，操作是否足够便捷，内容是否容易理解，这些都是我们在产品设计时需要考虑的点，必要时可以先拿出原型图与需求提出方进行讨论。
c.系统运维的时候，要积极响应并解决客户提出的问题，对于客户的建议保持好奇，用户提出的每一条建议都是宝贵的，认真听取并且分析这些建议来找到用户的核心诉求，解决用户的诉求就是在做好一个产品的路上不断前进。
二、展望未来
请对未来一年/半年/季度的工作及个人成长进行规划，展示重要的方向性和策略性思考。
1.请结合金服新的愿景与使命，谈谈下阶段的工作目标、策略或者思路？
金服的使命：科技连接金融，为美好生活创造小惊喜
金服的愿景：提供美团客户首选的金融服务，每天服务十亿人次
下阶段目标：持续为客户带来小惊喜。
策略：
我理解所谓“小惊喜”是量变产生质变，不放过任何可以改进的点，聚沙成塔，最终能赢得用户的正是这亿点	点小惊喜。正如我们在产品的设计上，对于未上线的功能不是说一步到位，让用户感觉到翻天覆地的变化，而	是慢慢迭代，一步一个小惊喜，对于已经上线的功能，我们一要积极采纳用户提出的建议，二要站在客户的角	度反复观察，寻找可以优化的地方，不断迭代优化，最终让客户满意。
2.下阶段的个人成长目标是什么？
提升自己的知识储备量，更好的支撑业务需求。
3.针对未来的目标，是否需要相关的资源支持和帮助？
暂时不需要，对于我下个阶段的成长目标，就是通过阅读和在项目中实战来成长。

